Problem Statement:
Given the root of a binary tree, flatten the tree into a "linked list":
The "linked list" should use the same TreeNode class where the right child pointer points to the next node in the list and the left child pointer is always null.
The "linked list" should be in the same order as a pre-order traversal of the binary tree.

Solution:
the idea here it to follow reverse preorder traversal and when you come back from recurion you change pointers. since it 
should be same as preorder traversal(root left right) we go to right then left and when we are at root
whatever is at right is the previously formed list or right element and left child of it should be NULL because it is singly
linked list and the current will be the new right child in the list.

TC -> O(N)
SC -> O(N) for recursion stack space

Problem Link: https://leetcode.com/problems/flatten-binary-tree-to-linked-list/