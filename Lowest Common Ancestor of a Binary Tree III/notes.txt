Problem Statement:
This problem is part of Leetcode Premium similar name problem can be found on codestudio.
Solution:
The idea here is to go to their parent untill they match their parent but if a node is at deeper level
it will require more hops to reach root whereas node at lower depth will require less hop. so when any 
one of the node reaches to root and if they are not matching we reset null node to the other node.
why because one is travelling faster other is slower so if we assign slower to slower we cannot meet
so assign slower to faster and viceversa untill they meet when they meet that is the LCA.

TC -> O(N)
SC -> O(N)

Problem Link: https://www.codingninjas.com/codestudio/problems/lowest-common-ancestor-of-a-binary-tree-iii