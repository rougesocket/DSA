Problem Statement:
You are given an undirected graph. You are given an integer n which is the number of nodes in the graph and an array edges, where each edges[i] = [ui, vi] indicates that there is an undirected edge between ui and vi.

A connected trio is a set of three nodes where there is an edge between every pair of them.

The degree of a connected trio is the number of edges where one endpoint is in the trio, and the other is not.

Return the minimum degree of a connected trio in the graph, or -1 if the graph has no connected trios.

Solution:
DO as the problem says so you need trio so you need to form a triplet such that they are adjacent and
you need to check at a faster rate whether they are adjacent or not so you build adjacency matrix
(cost of checking neighbors is O(1)) and you need to create an indegree array so that we can calculate the
degree of trio which goes by the formula : let a,b,c be the trio so the degree of trio is given by
in(a)+in(b)+in(c) but the condition says that one of the end point is not in trio so for each vertex in trio
we got 2 of them extra into our answer we subtract for each vertex in trio so the final result is

in(a)+in(b)+in(c) - 2*3
in(a)+in(b)+in(c) - 6

iterate over all trio and find the minimum if you are not able to find any trio we return -1

TC -> O(N^3)
SC -> O(N^2)

Problem Link: https://leetcode.com/problems/minimum-degree-of-a-connected-trio-in-a-graph/